import * from util.Vectors;
import * from util.Errors;
import * from util.Grid;

class Voronoi{

	/// Default grid cell size
	static var DEFAULT_GRID_SIZE = Vec3d.fromScalar(5);

	/// Default how many points per cell
	static var DEFAULT_VORONOI_FREQUENCY = 1.0;


	/// Frequency of the seed points.
	var frequency = Voronoi.DEFAULT_VORONOI_FREQUENCY;

	/// the amount of blocks in each of the axis for each cell
	var gridSize = Voronoi.DEFAULT_GRID_SIZE;

    var grid;

	Voronoi() {
	    this.grid = new Grid(this.gridSize);
	}
	Voronoi(gridSize: Vec3d){
	    this.gridSize = gridSize;
	    this.grid = new Grid(this.gridSize);
	}

    Voronoi(gridSize: Vec3d, frequency: Number){
	    this.gridSize = gridSize;
        this.grid = new Grid(this.gridSize);
	    this.frequency = frequency;
	}


	fun isEnableDistance() {
		return this.enableDistance;
	}

	fun setEnableDistance(enableDistance: Boolean) {
		this.enableDistance = enableDistance;
		return this;
	}

	fun getFrequency() {
		return this.frequency;
	}

	fun setFrequency(frequency) {
		this.frequency = frequency;
		return this;
	}

    fun getValue(x: Number, y: Number, z: Number) {
        return this.getValue(new Vec3d(x,y,z));

    }
    fun getValue(vec: Vec3d) {

        centreCell = this.grid.getCellForPoint(vec, true);

        neighbours = centreCell.getNeighbours();
        cells = neighbours.append(centreCell);
        minDistanceCell = 1/0;
        minPointDistance = 1/0;
        foreach(cell:cells){
            if(cell.getNumberOfPoints() != this.frequency){
                cell.clearPoints();
                cell.addRandomPoints(this.frequency);
            }
            foreach(point : cell.getPoints()){
                distance = point.distanceToSquared(vec);
                if(distance < minPointDistance){
                    minDistanceCell = cell.getId();
                    minPointDistance = distance;
                }
            }
        }
        return new Vec2d(Math.sqrt(minPointDistance), minDistanceCell);
    }

}


class Perlin {
	/// Default frequency for the noise::module::Perlin noise module.
	static var DEFAULT_PERLIN_FREQUENCY = 10;
    static var RANGE = new Vec2d(-0.5, 0.5);
    static fun map(n, bMin, bMax){
        return bMin + (n - Perlin.RANGE.x) * (bMax - bMin) / (Perlin.RANGE.y - Perlin.RANGE.x);
    }
	/// Frequency of the first octave.
	var frequency = Perlin.DEFAULT_PERLIN_FREQUENCY;

    var vectorGrid = {};

    Perlin() {
	}

    Perlin(frequency) {
        this.frequency = frequency;
	}
	fun getFrequency() {
		return this.frequency;
	}

	fun setFrequency(frequency: Number) {
		this.frequency = frequency;
		return this;
	}

    fun getValue(vec: Vec3d) {
        vec = vec.divideScalar(this.frequency);
        fPos = vec.floor();
        dPos = vec-fPos;

        dotProductList = [];

        for (i = 0; i < 2; i++) {
            x = fPos.x + i;
            if (!this.vectorGrid.containsKey(x)) {
                this.vectorGrid[x] = {};
            }
            for (j = 0; j < 2; j++) {
                y = fPos.y + j;
                if (!this.vectorGrid[x].containsKey(y)) {
                    this.vectorGrid[x][y] = {};
                }
                for (k = 0; k < 2; k++) {
                    z = fPos.z + k;
                    if (!this.vectorGrid[x][y].containsKey(z)) {
                        angle1 = Math.toRadians(random(360));
                        angle2 = Math.toRadians(random(360));
                        this.vectorGrid[x][y][z] = new Vec3d(Math.cos(angle1), Math.sin(angle1), Math.sin(angle2));
                        //this.vectorGrid[x][y][z] = new Vec3d(random(3)-1, random(3)-1, random(3)-1));
                    }
                    dotProductList.append(this.vectorGrid[x][y][z].dot(dPos-new Vec3d(i,j,k)));
                }
            }
        }

        interpolationLevel1 = [];
        for (i = 0; i < 8; i = i + 2) {
            interpolationLevel1.append(this.interpolate(dotProductList[i], dotProductList[i + 1], dPos.z));
        }
        interpolatedNumber1 = this.interpolate(interpolationLevel1[0], interpolationLevel1[1], dPos.y);
        interpolatedNumber2 = this.interpolate(interpolationLevel1[2], interpolationLevel1[3], dPos.y);
        return Math.clamp(this.interpolate(interpolatedNumber1, interpolatedNumber2, dPos.x),-0.5, 0.5);
    }

    fun getValue(x: Number, y: Number, z: Number) {
       return this.getValue(new Vec3d(x,y,z));

    }

    fun interpolate(number1: Number, number2: Number, weight: Number): Number {
        return number1 + this.fadeFunction(weight) * (number2 - number1);
    }

    fun fadeFunction(number: Number): Number {
        return (6 * number ^ 5) - (15 * number ^ 4) + (10 * number ^ 3);
    }
}

class RidgedMulti {
	/// Default frequency for the noise
	static var DEFAULT_PERLIN_FREQUENCY = 10;
    static var RANGE = new Vec2d(0, 1);

    static fun map(n, bMin, bMax){
        return bMin + (n - RidgedMulti.RANGE.x) * (bMax - bMin) / (RidgedMulti.RANGE.y - RidgedMulti.RANGE.x);
    }

	var frequency = Perlin.DEFAULT_PERLIN_FREQUENCY;
    var vectorGrid = {};

    RidgedMulti() {
	}

    RidgedMulti(frequency) {
        this.frequency = frequency;
	}

	fun getFrequency() {
		return this.frequency;
	}

	fun setFrequency(frequency: Number) {
		this.frequency = frequency;
		return this;
	}

    fun getValue(vec: Vec3d) {
        vec = vec.divideScalar(this.frequency);
        fPos = vec.floor();
        dPos = vec-fPos;

        dotProductList = [];

        for (i = 0; i < 2; i++) {
            x = fPos.x + i;
            if (!this.vectorGrid.containsKey(x)) {
                this.vectorGrid[x] = {};
            }
            for (j = 0; j < 2; j++) {
                y = fPos.y + j;
                if (!this.vectorGrid[x].containsKey(y)) {
                    this.vectorGrid[x][y] = {};
                }
                for (k = 0; k < 2; k++) {
                    z = fPos.z + k;
                    if (!this.vectorGrid[x][y].containsKey(z)) {
                        angle1 = Math.toRadians(random(360));
                        angle2 = Math.toRadians(random(360));
                        this.vectorGrid[x][y][z] = new Vec3d(Math.cos(angle1), Math.sin(angle1), Math.sin(angle2));
                        //this.vectorGrid[x][y][z] = new Vec3d(random(3)-1, random(3)-1, random(3)-1));
                    }
                    dotProductList.append(this.vectorGrid[x][y][z].dot(dPos-new Vec3d(i,j,k)));
                }
            }
        }

        interpolationLevel1 = [];
        for (i = 0; i < 8; i = i + 2) {
            interpolationLevel1.append(this.interpolate(dotProductList[i], dotProductList[i + 1], dPos.z));
        }
        interpolatedNumber1 = this.interpolate(interpolationLevel1[0], interpolationLevel1[1], dPos.y);
        interpolatedNumber2 = this.interpolate(interpolationLevel1[2], interpolationLevel1[3], dPos.y);
        return Math.abs(Math.clamp(this.interpolate(interpolatedNumber1, interpolatedNumber2, dPos.x),-0.5, 0.5))*2;
    }

    fun getValue(x: Number, y: Number, z: Number) {
       return this.getValue(new Vec3d(x,y,z));

    }

    fun interpolate(number1: Number, number2: Number, weight: Number): Number {
        return number1 + this.fadeFunction(weight) * (number2 - number1);
    }

    fun fadeFunction(number: Number): Number {
        return (6 * number ^ 5) - (15 * number ^ 4) + (10 * number ^ 3);
    }
}

